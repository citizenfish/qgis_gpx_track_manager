# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GPXTrackManager
                                 A QGIS plugin
 A plugin to simplify the process of creating and editing GPX routes
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-10-28
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Dave Barter
        email                : dave@phased.co.uk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .gpxTrackManager_dockwidget import GPXTrackManagerDockWidget
import os.path

#Plugin specific
from PyQt5.QtWidgets import QAction, QFileDialog
from qgis.core import QgsProject,QgsVectorLayer,QgsWkbTypes

class GPXTrackManager:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):

        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GPXTrackManager_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&GPX Track Manager')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'GPXTrackManager')
        self.toolbar.setObjectName(u'GPXTrackManager')

        #print "** INITIALIZING GPXTrackManager"

        self.pluginIsActive = False
        self.dockwidget = None


    def tr(self, message):
        return QCoreApplication.translate('GPXTrackManager', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip="GPX Track Manager",
        whats_this="GPX Track Manager",
        parent=None):
        """ Add to toolbar """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/gpxTrackManager/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'GPX Track Manager'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)
        self.pluginIsActive = False


    def unload(self):
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&GPX Track Manager'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True


            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = GPXTrackManagerDockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # connect ui buttons

            self.dockwidget.loadFileButton.clicked.connect(self.select_input_file)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()

    #---------------------------------------------------------------------------

    def select_input_file(self):
        filename, _filter = QFileDialog.getOpenFileName(self.dockwidget, self.tr("Select GPX file"),"", "GPX (*.gpx *.GPX)")
        self.dockwidget.loadedFileLabel.setText(filename)
    
        names = ["waypoints", "routes", "tracks"]
        for name in names:
            vlayer = self.iface.addVectorLayer(filename+"|layername="+name, name, "ogr")
            # Remove any empty layers
            if vlayer.featureCount() == 0:
                QgsProject.instance().removeMapLayers( [vlayer.id()] )
            else:
                # Repurpose GPX layers as vectors so we can edit them
                layer_wkb = vlayer.wkbType()
                newvl = QgsVectorLayer(QgsWkbTypes.displayString(layer_wkb), name+"_editable", "memory")
                pr = newvl.dataProvider()
                pr.addAttributes(vlayer.fields())
                newvl.updateFields()
                for feature in vlayer.getFeatures():
                    pr.addFeatures([feature])
                # Get rid of original GPX layer    
                QgsProject.instance().removeMapLayers( [vlayer.id()] )
                QgsProject.instance().addMapLayer(newvl)
                #set it into edit mode
                newvl.startEditing()

        #Go straight into edit mode
        self.iface.actionVertexTool().trigger()

